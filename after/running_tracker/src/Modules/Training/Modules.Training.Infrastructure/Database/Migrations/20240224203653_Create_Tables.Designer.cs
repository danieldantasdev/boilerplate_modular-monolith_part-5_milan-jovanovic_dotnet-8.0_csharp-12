// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Training.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modules.Training.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TrainingDbContext))]
    [Migration("20240224203653_Create_Tables")]
    partial class Create_Tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("training")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "training");
                });

            modelBuilder.Entity("Modules.Training.Domain.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric")
                        .HasColumnName("distance");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_activities");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_activities_workout_id");

                    b.ToTable("activities", "training");
                });

            modelBuilder.Entity("Modules.Training.Domain.Workouts.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("numeric")
                        .HasColumnName("distance");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<int>("ExerciseType")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_type");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer")
                        .HasColumnName("target_type");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_exercises");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_exercises_workout_id");

                    b.ToTable("exercises", "training");
                });

            modelBuilder.Entity("Modules.Training.Domain.Workouts.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_workouts");

                    b.ToTable("workouts", "training");
                });

            modelBuilder.Entity("Modules.Training.Domain.Activities.Activity", b =>
                {
                    b.HasOne("Modules.Training.Domain.Workouts.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activities_workouts_workout_id");
                });

            modelBuilder.Entity("Modules.Training.Domain.Workouts.Exercise", b =>
                {
                    b.HasOne("Modules.Training.Domain.Workouts.Workout", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercises_workouts_workout_id");
                });

            modelBuilder.Entity("Modules.Training.Domain.Workouts.Workout", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
